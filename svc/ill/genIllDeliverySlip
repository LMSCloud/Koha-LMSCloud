#!/usr/bin/perl

# Copyright 2022-2023 LMSCloud GmbH
#
# This file is part of Koha
#
# Koha is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Koha is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Koha; if not, see <http://www.gnu.org/licenses>.

use Modern::Perl;
use CGI;
use Data::Dumper;
$CGI::LIST_CONTEXT_WARN = 0;

use C4::Auth qw( get_template_and_user haspermission get_user_subpermissions );
use C4::Output qw( output_with_http_headers );
use C4::Letters;
use C4::Members;
use C4::Overdues;
use C4::Context;
use Koha::Acquisition::Currencies;
use Koha::Libraries;
use Koha::DateUtils qw( output_pref dt_from_string );
use C4::NoticeFees;
use Locale::Currency::Format 1.28;
use Koha::DateUtils;
use File::Spec;
use C4::NewsChannels; #get slip news

print STDERR "svc/ill/genIllDeliverySlip START\n";
my $input = new CGI;

my ($template, $user, $cookie) = get_template_and_user({
    template_name   => "members/tables/sendnotice.tt",
    query           => $input,
    type            => "intranet",
    authnotrequired => 0,
    flagsrequired   => { borrowers => 'send_adhoc_notices' }
});

my @borrowers = $input->param('borrowernumbers[]');
my $params = {
        borrowernumbers => \@borrowers,
        lettercode      => scalar $input->param('use_letter'),
        prefer_email    => scalar $input->param('use_email'),
        slipcount       => scalar $input->param('slipcount'),
        illrequestid    => scalar $input->param('illrequestid'),
        biblionumber    => scalar $input->param('biblionumber'),
        itemnumber      => scalar $input->param('itemnumber'),
        duedate         => scalar $input->param('duedate'),
    };
my $result = genIllDeliverySlip($params);
print STDERR "svc/ill/genIllDeliverySlip result->printedfile:" . $result->{printedfile} . ":\n";

$template->param(
    letters        => $result->{letters},
    letter_created => $result->{letter_created},
    letter_printed => $result->{letter_printed},
    letter_mailed  => $result->{letter_mailed},
    printedfile    => $result->{printedfile}
);

output_with_http_headers $input, $cookie, $template->output, 'json';

sub genIllDeliverySlip {
    my $params = shift;
    
    my @borrowernumbers;
    my $lettercode;
    my $prefer_email;
    my $illrequestid = 0;
    my $biblionumber = 0;
    my $itemnumber = 0;
    my $duedate = '';
    
    @borrowernumbers = @{$params->{borrowernumbers}} if ( $params->{borrowernumbers} );
    $lettercode      = $params->{lettercode} if ( $params->{lettercode} );
    $prefer_email    = $params->{prefer_email} if ( $params->{prefer_email} );
    $illrequestid    = $params->{illrequestid} if ( $params->{illrequestid} );
    $biblionumber    = $params->{biblionumber} if ( $params->{biblionumber} );
    $itemnumber      = $params->{itemnumber} if ( $params->{itemnumber} );
    $duedate         = $params->{duedate} if ( $params->{duedate} );
print STDERR "svc/ill/genIllDeliverySlip::genIllDeliverySlip START borrowernumbers0:" . $borrowernumbers[0] . ": borrowernumbers1:" . $borrowernumbers[1] . ": lettercode:$lettercode:\n";
print STDERR "svc/ill/genIllDeliverySlip::genIllDeliverySlip START biblionumber:$biblionumber: itemnumber:$itemnumber:\n";

    my $letters = [];
    my $letter_created = 0;
    my $letter_printed  = 0;
    my $letter_mailed  = 0;
    my $printfilename  = '';
    my @printmessages = ();
    my @emailmessages = ();
    my $today = output_pref( { dt => dt_from_string(), dateonly => 0, dateformat => 'iso' } );
    
    if ($lettercode) {    

        my $dbh = C4::Context->dbh();
        my $branchcode = C4::Context::mybranch();
        my $lettertemplates = {};
        my $module = 'circulation';

        my $active_currency = Koha::Acquisition::Currencies->get_active;
        my $currency_format;
        $currency_format = $active_currency->currency if defined($active_currency);
        
        my $library             = Koha::Libraries->find($branchcode);
        my $admin_email_address = $library->branchemail;
        
        
        my @transferTypes = ('print');
        for my $transfer (@transferTypes) {
            my $letter = C4::Letters::getletter($module, $lettercode, $branchcode, $transfer );
            if ( $letter && $letter->{'content'} ) {
                $lettertemplates->{$transfer}->{'letter'} = $letter;
                $lettertemplates->{$transfer}->{'transportType'}  = $transfer;
            }
        }
        $lettertemplates->{'print'} = $lettertemplates->{'email'} if ( !exists($lettertemplates->{'print'}) && exists($lettertemplates->{'email'} ) );
        $lettertemplates->{'email'} = $lettertemplates->{'print'} if ( !exists($lettertemplates->{'email'}) && exists($lettertemplates->{'print'} ) );
        
        my $borrowernumber = $borrowernumbers[1];    # [0] is sending ILL library, [1] is ordering borrower
        my $illrequest = Koha::Illrequests->find({ illrequest_id => $illrequestid });
        if ( $illrequest ) {
            my $transport_type = 'print';
            
            my $substitute = { bib => $library->branchname, 'count' => 1 };
            $substitute->{today} = output_pref( { dt => dt_from_string, dateonly => 1} );
            $substitute->{illreqattr_duedate} = output_pref( { dt => dt_from_string($duedate), dateonly => 1} );
            if ( exists($lettertemplates->{$transport_type}) ) {
                my $repeat = {};
                #my $borrowernumber = $illrequest->borrowernumber();    # would be viable, but $borrowernumber is already set via $borrowernumbers[1]
                my $biblionumber = $illrequest->biblio_id();

                my $fieldResults = $illrequest->illrequestattributes->search( {  } );    # no selection, find all illrequestattributes having this illrequest_id
                my $illreqattr = { map { ( $_->type => $_->value ) } ($fieldResults->as_list) };

                my %tables = ( 'biblio' => $biblionumber, 'biblioitems' => $biblionumber, 'borrowers' => $borrowernumber, 'branches' => $branchcode, 'illrequests' => $illrequestid, 'illrequestattributes' => $illreqattr, 'items' => $itemnumber, 'account' => $borrowernumbers[0] );    # 'account' is used for the ILL sending library

                my $prepared_letter = C4::Letters::GetPreparedLetter (
                    module => $module,
                    letter_code => $lettercode,
                    branchcode => $branchcode,
                    tables => \%tables,
                    substitute => $substitute,
                    repeat => $repeat,
                    message_transport_type => $lettertemplates->{$transport_type}->{'transportType'},
                );
                
                my $message_id = C4::Letters::EnqueueLetter(
                                            {   letter                 => $prepared_letter,
                                                borrowernumber         => $borrowernumber,
                                                message_transport_type => $transport_type,
                                                from_address           => $admin_email_address,
                                                to_address             => '',
                                                branchcode             => $branchcode
                                            }
                                        );

                # as we want to create an ouput file for printing, lets collect the message_ids of prepared data
                push(@printmessages,$message_id) if ( $transport_type eq 'print' );
                push(@emailmessages,$message_id) if ( $transport_type eq 'email' );
                push @$letters, { borrowernumber => $borrowernumber, lettertype => $transport_type, message_id => $message_id };
                $letter_created++;
print STDERR "svc/ill/genIllDeliverySlip::genIllDeliverySlip after C4::Letters::EnqueueLetter() message_id:$message_id: letter_created:$letter_created:\n";
            }
        }
    }
    
    $letter_printed = scalar @printmessages;
    $letter_mailed = scalar @emailmessages;
    
    if ( $letter_printed ) {
        $printfilename = CreatePrintOutput( { lettercode => $lettercode, printmessages => \@printmessages } );
    }
    if ( $letter_mailed ) {
        SendMailMessages( { lettercode => $lettercode, emailmessages => \@emailmessages } );
    }

    return  {
        letters        => $letters,
        letter_created => $letter_created,
        letter_printed => $letter_printed,
        letter_mailed  => $letter_mailed,
        printedfile    => $printfilename
    };
}

sub SendMailMessages {
    my $params = shift;
    
    my @messageIDs;
    @messageIDs = @{$params->{emailmessages}} if ( $params->{emailmessages} );
    my $lettercode = $params->{lettercode} if ( $params->{lettercode} );

    my @messages = @{ GetMessagesById( { message_id => \@messageIDs } ) };
    
    foreach my $message ( @messages ) {
        C4::Letters::_send_message_by_email( $message );
    }
}

sub CreatePrintOutput {
    my $params = shift;
    
    my @messageIDs;
    @messageIDs = @{$params->{printmessages}} if ( $params->{printmessages} );
    my $lettercode = $params->{lettercode} if ( $params->{lettercode} );
print STDERR "svc/ill/genIllDeliverySlip::CreatePrintOutput START; lettercode:$lettercode: count messageIDs:" . scalar @messageIDs . ":\n";
print STDERR "svc/ill/genIllDeliverySlip::CreatePrintOutput START; messageIDs:", @messageIDs, ":\n";
    
    my @messages = @{ GetMessagesById( { message_id => \@messageIDs } ) };
print STDERR "svc/ill/genIllDeliverySlip::CreatePrintOutput count found messages:" . scalar @messages . ":\n";
    
    foreach my $message (@messages) {
        $message->{'content'} =~ s/\r//g;
        $message->{'content'} =~ s/\n/<br \/>/g  if ( $message->{'content_type'} !~ /^text\/html/ );
    }
    
    my $printfilename = 'Adhoc';
    $printfilename .= '_' . $lettercode if ( $lettercode );
    
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime;
    $printfilename .= sprintf("_%04d-%02d-%02d_%02d-%02d-%02d",$year+1900,$mon+1,$mday,$hour,$min,$sec);
    $printfilename .= ".html";
    
    my $outputdir = C4::Context->config('outputdownloaddir');
    $outputdir = File::Spec->catpath( "", $outputdir, "batchprint" );
    my $generatefilename = File::Spec->catdir( $outputdir, $printfilename );
print STDERR "svc/ill/genIllDeliverySlip::CreatePrintOutput after File::Spec->catdir() generatefilename:$generatefilename:\n";
    
    Generate_html({
                lettercode => $lettercode,
                messages => \@messages,
                filepath => $generatefilename,
            });
    
    foreach my $message ( @messages ) {
        C4::Letters::_set_message_status(
            {
                message_id => $message->{'message_id'},
                status => 'sent'
            }
        );
    }

    return $printfilename;
}

sub Generate_html {
    my ( $params ) = @_;
    my $lettercode = $params->{lettercode};
    my $messages = $params->{messages};
    my $filepath = $params->{filepath};

    my $template =
      C4::Templates::gettemplate( 'ill/ill-print-notices.tt', 'intranet',
        new CGI );

    my $today_syspref = output_pref( { dt => dt_from_string, dateonly => 1 } );
    my $stylesheet = C4::Context->preference("NoticeCSS");
    # If the letter.code ends with '_NOCSS' or '_NOCSS_CHARGE', then no NoticeCSS content should be transferred in param 'stylesheet'.
    if ( $lettercode =~ /^.*_NOCSS$/ || $lettercode =~ /^.*_NOCSS_CHARGE$/ ) {
        $stylesheet = '';
    }
print STDERR "svc/ill/genIllDeliverySlip::Generate_html lettercode:$lettercode: stylesheet:$stylesheet: filepath:$filepath: today_syspref:$today_syspref:\n";
    $template->param(
        stylesheet => $stylesheet,
        today      => $today_syspref,
        messages   => $messages,
    );

    open my $OUTPUT, '>encoding(utf-8)', $filepath
        or die "Could not open $filepath: $!";
    print $OUTPUT $template->output;
    close $OUTPUT;
}

__END__

