#!/usr/bin/perl

# Copyright 2018 LMSCloud GmbH
#
# This file is part of Koha.
#
# Koha is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# Koha is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with Koha; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

use strict;
use warnings;

use CGI;
use JSON qw(to_json);

use C4::Auth qw(check_cookie_auth haspermission get_session);
use C4::Biblio qw(GetMarcBiblio GetFrameworkCode);
use C4::Context;
use C4::Divibib::NCIPService;
use C4::Items;

use Koha::DateUtils;
use Koha::Libraries;
use Koha::ItemTypes;

my $input = new CGI;

my ( $auth_status, $sessionID ) = check_cookie_auth( $input->cookie('CGISESSID'));
my $session = get_session($sessionID);
my $userid = $session->param('id');

unless (haspermission($userid, { circulate => 'circulate_remaining_permissions' })
    || haspermission($userid, { borrowers => '*' })) {
    exit 0;
}

my @sort_columns = qw /date_due title itype issuedate branchcode itemcallnumber/;

my @borrowernumber   = $input->multi_param('borrowernumber');
my $offset           = $input->param('iDisplayStart');
my $results_per_page = $input->param('iDisplayLength') || -1;

my $sorting_column = $input->param('iSortCol_0') || q{};
$sorting_column = ( $sorting_column && $sort_columns[$sorting_column] ) ? $sort_columns[$sorting_column] : 'issuedate';

my $sorting_direction = $input->param('sSortDir_0') || q{};
$sorting_direction = $sorting_direction eq 'asc' ? 'asc' : 'desc';

$results_per_page = undef if ( $results_per_page == -1 );

binmode STDOUT, ":encoding(UTF-8)";
print $input->header( -type => 'text/plain', -charset => 'UTF-8' );


my $divibib_issues = [];
if (C4::Context->preference('DivibibEnabled')) {
    my $service = C4::Divibib::NCIPService->new();
    $divibib_issues = $service->getPendingIssues($borrowernumber[0]);
}

my @checkouts = ();
my $item_level_itypes = C4::Context->preference('item-level_itypes');
my %branches = map { $_->branchcode => $_->branchname } Koha::Libraries->search({}, { order_by => 'branchname' });    # load the branches

foreach my $c ( @{$divibib_issues} ) {

    # read dummy items record of divibib title
    my @all_items = GetItemsInfo( $c->{biblionumber} );
    my $item;
    if ( scalar @all_items  >= 1) {
        $item = $all_items[0];
    } else {
        $item = {};
    }

    my $itemtype = Koha::ItemTypes->find($item_level_itypes ? $item->{itype} : lc($c->{itemtype}));
    my $checkout = {
        DT_RowId             => ($c->{itemnumber} ? $c->{itemnumber} : '') . '-' . ( $c->{borrowernumber} ? $c->{borrowernumber} : ''),
        title                => $c->{title},
        author               => $c->{author},
        barcode              => ( $item->{barcode} ? $item->{barcode} : $c->{barcode} ),    # $c->{barcode} contains the Onleihe itemtype
        itemtype             => ( $item_level_itypes ? $item->{itype} : lc($c->{itemtype})),
        itemtype_description => ( $itemtype ? $itemtype->translated_description : '' ),
        itemnotes            => $item->{itemnotes},
        itemnotes_nonpublic  => $item->{itemnotes_nonpublic},
        branchname           => ( defined($item->{homebranch}) && defined($branches{$item->{homebranch}}) ? $branches{$item->{homebranch}} : ''),
        branchcode           => $item->{homebranch},
        itemnumber          => $item->{itemnumber},
        borrowernumber      => $c->{borrowernumber},
        biblionumber        => $c->{biblionumber},
        issuedate           => output_pref({ dt => $c->{issuedate}, dateformat => 'sql' }),
        date_due            => output_pref({ dt => $c->{date_due}, dateformat => 'sql' }),
        date_due_overdue    => $c->{overdue} ? JSON::true : JSON::false,
        onsite_checkout     => $c->{onsite_checkout},
        issuedate_formatted => output_pref(
            {
                dt          => dt_from_string( output_pref({ dt => $c->{issuedate}, dateformat => 'sql' }) ),
                dateonly => 1,
                as_due_date => 1
            }
        ),
        date_due_formatted => output_pref(
            {
                dt          => dt_from_string( output_pref({ dt => $c->{date_due}, dateformat => 'sql' }) ),
                dateonly => 1,
                as_due_date => 1
            }
        ),
    };

    push( @checkouts, $checkout );
}


@checkouts = sort { $a->{timestamp} cmp $b->{timestamp} } @checkouts;
@checkouts = reverse(@checkouts)
  unless ( C4::Context->preference('previousIssuesDefaultSortOrder') eq 'desc' );

my $i = 1;
map { $_->{sort_order} = $i++ } @checkouts;


my $data;
$data->{'iTotalRecords'}        = scalar @checkouts;
$data->{'iTotalDisplayRecords'} = scalar @checkouts;
$data->{'sEcho'}                = $input->param('sEcho') || undef;
$data->{'aaData'}               = \@checkouts;

print to_json($data);
