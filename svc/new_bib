#!/usr/bin/perl

# Copyright 2007 LibLime
#
# This file is part of Koha.
#
# Koha is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Koha is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Koha; if not, see <http://www.gnu.org/licenses>.
#

use Modern::Perl;

use CGI qw ( -utf8 );
use C4::Auth qw/check_api_auth/;
use C4::Biblio;
use C4::Items;
use XML::Simple;
use C4::Charset;

use Koha::Biblios;

my $query = CGI->new;
binmode STDOUT, ':encoding(UTF-8)';

my ($status, $cookie, $sessionID) = check_api_auth($query, { editcatalogue => 'edit_catalogue'} );
unless ($status eq "ok") {
    print $query->header(-type => 'text/xml', -status => '403 Forbidden');
    print XMLout({ auth_status => $status }, NoAttr => 1, RootName => 'response', XMLDecl => 1);
    exit 0;
}

if ($query->request_method eq "POST") {
    add_bib($query);
} else {
    print $query->header(-type => 'text/xml', -status => '400 Bad Request');
}

exit 0;

sub add_bib {
    my $query = shift;

    my $result = {};
    my $inxml = $query->param('POSTDATA');
    my $frameworkcode = $query->url_param('frameworkcode') // '';
    print $query->header(-type => 'text/xml', -charset => 'utf-8');

    my $marcflavour = C4::Context->preference('marcflavour') || 'MARC21';
    my $record = eval {MARC::Record::new_from_xml( $inxml, "UTF-8", $marcflavour)};
    my $do_not_escape = 0;
    if ($@) {
        $result->{'status'} = "failed";
        $result->{'error'} = $@;
    } else {
        # fix character set
        if ($record->encoding() eq 'MARC-8') {
            my ($guessed_charset, $charset_errors);
            ($record, $guessed_charset, $charset_errors) = C4::Charset::MarcToUTF8Record($record, $marcflavour);
        }

        my $fullrecord = $record->clone();

        # delete any item tags
        my ( $itemtag, $itemsubfield ) =
          C4::Biblio::GetMarcFromKohaField( "items.itemnumber" );
        foreach my $field ( $record->field($itemtag) ) {
            $record->delete_field($field);
        }
        my ( $biblionumber, $biblioitemnumber ) = C4::Biblio::AddBiblio( $record, $frameworkcode );
        my $biblio = Koha::Biblios->find( $biblionumber );
        my $new_record = $biblio->metadata->record;
        if ( $query->url_param('items') ) {
            foreach my $field ( $fullrecord->field($itemtag) ) {
                my $one_item_record = $new_record->clone();
                $one_item_record->add_fields($field);
                C4::Items::AddItemFromMarc( $one_item_record, $biblionumber );
            }
        }

        $biblio = Koha::Biblios->find( $biblionumber );
        $new_record = $biblio->metadata->record({ embed_items => scalar $query->url_param('items') });
        $result->{'status'} = "ok";
        $result->{'biblionumber'} = $biblionumber;
        my $xml = $new_record->as_xml_record();
        $xml =~ s/<\?xml.*?\?>//i;
        $result->{'marcxml'} =  $xml;
        $do_not_escape = 1;
    }
   
    print XMLout($result, NoAttr => 1, RootName => 'response', XMLDecl => 1, NoEscape => $do_not_escape); 
}
